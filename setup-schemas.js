#!/usr/bin/env node

/**
 * Script para configurar schemas separados no mesmo banco de dados
 * Cria schemas 'development' e 'production' para isolamento dos dados
 */

import { Pool } from '@neondatabase/serverless';
import ws from 'ws';
import { neonConfig } from '@neondatabase/serverless';

neonConfig.webSocketConstructor = ws;

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL n√£o definida');
  process.exit(1);
}

const pool = new Pool({ connectionString: DATABASE_URL });

async function setupSchemas() {
  try {
    console.log('üóÑÔ∏è === CONFIGURANDO SCHEMAS SEPARADOS ===\n');
    
    // Criar schemas
    console.log('üìÅ Criando schemas...');
    await pool.query('CREATE SCHEMA IF NOT EXISTS development');
    await pool.query('CREATE SCHEMA IF NOT EXISTS production');
    console.log('‚úÖ Schemas criados: development, production\n');
    
    // Listar tabelas no schema p√∫blico atual
    const tables = await pool.query(`
      SELECT tablename FROM pg_tables 
      WHERE schemaname = 'public' 
      ORDER BY tablename
    `);
    
    console.log('üìã Copiando estrutura de tabelas...');
    for (const table of tables.rows) {
      const tableName = table.tablename;
      
      // Copiar estrutura para development
      await pool.query(`
        CREATE TABLE development.${tableName} 
        (LIKE public.${tableName} INCLUDING ALL)
      `);
      
      // Copiar estrutura para production  
      await pool.query(`
        CREATE TABLE production.${tableName} 
        (LIKE public.${tableName} INCLUDING ALL)
      `);
      
      console.log(`   ‚úÖ ${tableName} ‚Üí development, production`);
    }
    
    // Copiar dados atuais para development
    console.log('\nüìã Copiando dados para schema development...');
    for (const table of tables.rows) {
      const tableName = table.tablename;
      await pool.query(`
        INSERT INTO development.${tableName} 
        SELECT * FROM public.${tableName}
      `);
      
      const count = await pool.query(`SELECT COUNT(*) FROM development.${tableName}`);
      console.log(`   ‚úÖ ${tableName}: ${count.rows[0].count} registros`);
    }
    
    console.log('\nüéâ === CONFIGURA√á√ÉO CONCLU√çDA ===');
    console.log('üìä Resumo:');
    console.log('   ‚Ä¢ Schema development: Dados atuais copiados');
    console.log('   ‚Ä¢ Schema production: Estrutura criada (vazia)');
    console.log('   ‚Ä¢ Schema public: Dados originais mantidos');
    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   1. Atualizar c√≥digo para usar schemas espec√≠ficos');
    console.log('   2. Configurar NODE_ENV para determinar schema');
    console.log('   3. Testar em ambiente de desenvolvimento');
    
  } catch (error) {
    console.error('\n‚ùå === ERRO NA CONFIGURA√á√ÉO ===');
    console.error(error.message);
    process.exit(1);
  } finally {
    await pool.end();
    console.log('\nüîå Conex√£o encerrada');
  }
}

setupSchemas();